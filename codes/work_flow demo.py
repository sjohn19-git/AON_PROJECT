import os os.chdir("/Users/sebinjohn/AON_PROJECT/Data/codes")import pygmt#import dillimport pandas as pdfrom obspy import UTCDateTimeimport cv2from os.path import isfile, join import globfrom scipy.integrate import trapz import numpy as npimport pickleimport pygribimport xarray as xrimport numpy as npimport matplotlib.pyplot as pltimport cdsapifrom medfilt import medfiltfrom matplotlib.dates import MO, TU, WE, TH, FR, SA, SUimport matplotlib.dates as mdatesfrom PIL import Imageimport matplotlib.pyplot as pltfrom mpl_toolkits.mplot3d import Axes3Dimport matplotlib.gridspec as gridspecimport matplotlib.cm as cmimport matplotlib.colors as clos.chdir("/Users/sebinjohn/AON_PROJECT/Data/Video Making")with open("metadta.pkl","rb") as f:   long,lat,stationo ,env = pickle.load(f)    datapath="/Users/sebinjohn/AON_PROJECT/Data/*/"freq=[]name= pd.read_xml("pdf0.xml", xpath="/PsdRoot/Psds[1]/Psd[1]/value[@freq]")for i in range (95):    freq.append(name.iloc[i]['freq'])freq.append(19.740300000000000)sta="K13K"os.chdir(r"/Users/sebinjohn/AON_PROJECT/Data/"+sta)with open((str(sta)+".pkl"),"rb") as f:    sta, starttimeta, endtimeta,starttimeak,endtimeak,sta,cha,loc=pickle.load(f)   time_frame=np.arange(starttimeta,endtimeak,3600)# os.chdir("/Users/sebinjohn/AON_PROJECT/Data/median_Power_time_series")# with open(("median and mean"+str(time_frame[0])+"-"+str(time_frame[-1])+"secondary.pkl"), 'rb') as f:  # Python 3: open(..., 'wb')#           mean_timeseries,median_timeseries=pickle.load(f)            with open("final_"+sta+".npy", 'rb') as g:    final=np.load(g)         def mean(res):    su=0    for i in range(len(res)):        su+=res[i]    mea=su/len(res)    return mea    mean_power=np.array([])for j in range(len(time_frame)):    res=final[34:42,j]    out_mean=mean(res)    mean_power=np.append(mean_power,out_mean)interp_inde=np.array([])interpolated_x=medfilt(mean_power,7).copy()interp_x=medfilt(mean_power,7).copy()datagap=np.where(interp_x==0)[0]data_x=np.where(interp_x!=0)[0]for i in range(len(data_x)-1):    if data_x[i+1]-data_x[i]<12 and data_x[i+1]-data_x[i]>1:        interp_inde=np.append(interp_inde,np.array( [i for i in range(int(data_x[i])+1,int(data_x[i+1]))]))    else:        continueif len(interp_inde)>1:    interp=np.interp(interp_inde, data_x.reshape(np.shape(data_x)[0]), interp_x[data_x].reshape(np.shape(data_x)[0]))    interp_inde=(interp_inde+1).astype("int32")    interpolated_x[interp_inde]=interpinterpol=interpolated_x.copy()interpol[interpol==0]=np.nan       fint_frames=np.arange(starttimeta,endtimeak,3600)time_framem=[]for ele in time_frame:    time_framem.append(ele)for i in range(len(fint_frames)):    fint_frames[i]=mdates.date2num(fint_frames[i])        date_format=mdates.DateFormatter('%B-%Y')date_format1=mdates.DateFormatter('%m/%d/%yT%H')date_formatmean_power[mean_power==0]=np.nanxmin,xmax=17897,18262cmap = plt.get_cmap('nipy_spectral').copy()#cmap.set_over(color = 'w')fig = plt.figure(constrained_layout=True)fig = plt.figure()fig.set_figheight(10)fig.set_figwidth(18)spec = gridspec.GridSpec(nrows=2,ncols=1,hspace=0.2, height_ratios=[1,1])ax2=fig.add_subplot(spec[0])ax2.plot(fint_frames,mean_power)ax2.xaxis.set_major_formatter(date_format)ax2.set_ylabel("PSD")ax2.set_title("Mean PSD 2019-2020 (0.1Hz-0.2Hz)")ax2.set_xlim([xmin,xmax])#ax2.xaxis.set_major_locator(mdates.MonthLocator())#ax2.set_xticks([])ax3=fig.add_subplot(spec[1])ax3.plot(fint_frames,interpol)ax3.xaxis.set_major_formatter(date_format)ax3.set_ylabel("PSD")ax3.set_title("Median_filtered and interpolated PSD 2019-2020 (0.1Hz-0.2Hz)")ax3.set_xlim([xmin,xmax])ax3.set_ylim([-150,-100])ax2.set_ylim([-150,-100])# fig,axs=plt.subplots(4,1,figsize=(25,20),sharex=True)# axs[0].plot(time_framem,sum_wave_n)# axs[0].xaxis.set_major_formatter(date_format)# axs[0].set_ylabel("significant wave_height")# axs[0].set_title("mean wave Height over the region ")# axs[2].plot(time_framem,sum_tot[1,:])# axs[2].xaxis.set_major_formatter(date_format)# axs[2].set_title("mean raw-PSD over the stations in the region 10 Hz-15.4 Hz")# axs[2].set_ylabel("PSD")# for i in range(len(wista)):#     if wista[i]==1:#         lab=stationo[i-1][6:-4]#         axs[3].plot(time_framem,mean_timeseries_plo[0,i,1:],label=lab)# axs[3].legend()# axs[3].xaxis.set_major_formatter(date_format)# axs[3].set_title("raw-PSD of stations in region-each line is a station 10 Hz-15.4 Hz")# axs[3].set_ylabel("PSD")# for i in range(4):#     axs[i].set_xlim([min(time_framem),max(time_framem)])#     axs[i].xaxis.set_major_locator(mdates.DayLocator(interval=2))    #     #axs[i].set_xlim([min(time_framem),max(time_framem)])# for i in range(1,4):#     axs[i].set_ylim([-160,-110])#     axs[i].vlines(18210,-160,-110,colors="red",linestyles='solid')#     axs[i].vlines(18212,-160,-110,colors="red",linestyles='solid')#     axs[i].vlines(18221,-160,-110,colors="red",linestyles='solid')#     axs[i].vlines(18225,-160,-110,colors="red",linestyles='solid')